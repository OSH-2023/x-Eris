大家好，现在由我来进行 x-Eris 小组的中期报告，我们小组的项目主题是设计并实现一个 FreeRTOS 的虚拟文件系统。

我将对一下方面进行大致的汇报：项目背景，前瞻性，项目创新点，理论依据，技术依据，与开发路线。

首先是本项目的背景介绍

FreeRTOS 操作系统是是市场领先的微控制器和小型微处理器实时操作系统（RTOS）。
FreeRTOS 是一个在 MIT 开源许可证下开源的操作系统。
FreeRTOS 项目包括一个内核和一组不断增长的物联网库，已经被广泛应用于产业界。
FreeRTOS 的构建注重可靠性和易用性，其内核具有健壮性、占用面积小的特点，并且拥有广泛的设备支持，被广泛视为微控制器和小型微处理器的实际标准。
同时，它也有完善的生态系统，提供了众多社区贡献和专业支持。此外，往届也有许多关于它的项目，比如说 Rust 改写其内核。

从这张图中，就可以看出在 2017 年的时候，FreeRTOS 就已经拥有了大量的嵌入式操作系统市场份额，仅次于 Linux 的嵌入式操作系统。

但是，我们发现，FreeRTOS 的文件系统是并不完善的，FreeRTOS 本身内核并不支持文件系统，
其附加库也仅对FAT文件系统进行了扩充。FreeRTOS 的附加库 FreeRTOS-Plus-FAT 是一个开源的嵌入式 FAT 文件系统，
支持许多 FAT 格式。由此可以看出在现在嵌入式操作系统的发展背景下为 FreeRTOS 补充其他文件系统是有需求且合理的。

FATFS 支持 FAT12、FAT16 和 FAT32，支持多个存储媒介，并且有独立的缓冲区，可以对多个文件进行读/写，并特别对 8 位单片机和 16 位单片机做了优化。

[]

Romfs 按顺序存放所有的文件数据，因此在系统运行时，可以获得可观的 RAM 节省空间 romfs 的主要目的是拥有一个非常小的内核，它只链接了这个文件系统，然后可以在以后使用当前的模块实用程序加载任何模块。

接下来是该项目的前瞻性，即回答为什么需要 VFS 的问题。

这张图显示的是对物联网历年连接设备数量的统计及预测，可以看出，物联网设备数量逐年增长。随着设备的数量、种类的增多，物联网操作系统势的发展必要涉及改善对设备存储的管理。
从这一需求出发，为提升管理的效率、安全性、可靠性，我们可以设计出一个虚拟文件系统作为解决方案。

上表列出了一些常见的物联网操作系统的文件系统情况，可以看到，他们基本都具备文件系统，并且有多个操作系统配有虚拟文件系统，
然而市场占比前列的 FreeRTOS 却缺少文件系统支持。虽然拥有 FreeRTOS-Plus-FAT 项目作为文件系统，该项目有兼容性扩展性不足，仅支持 FatFS 的缺点，
所以我们认为，为 FreeRTOS 添加上虚拟文件系统以增强其扩展性是有需要的，也是趋势所向。

文件系统的部署有助于提升物联网操作系统的效率，这些提升主要体现在以下方面：
可靠性：使用文件系统能够在断电等突发情况下有效保护数据，以应对物联网设备多样化的使用环境；
安全性：文件系统对存储设备做了细致的规划与限制，能够有效防止违规行为的发生；
性能提升：文件系统对存储管理的作用是显而易见的，可以预见，未来物联网广泛普及后，在大量的数据存取情景下，文件系统的数据的存取效率将比直接读写有较大的提高。
易维护：对于相关从业者来说，具备文件系统的设备的问题将更容易排查，这可以在一定程度上提升了项目商业化的可行性。
综上，物联网操作系统的文件系统的可以在多方面提升其效率，由此我们认为为 FreeRTOS 开发虚拟文件系统具有前瞻性，值得开发。

我们提出的创新点首先是 FreeRTOS 上的 VFS。之前的 FreeRTOS 并未有成熟的文件系统项目，
仅有的 FreeRTOS-Plus-FAT 也只是添加了对 FAT 这一个文件系统的支持，
可拓展性以及易用性都不太好。因此我们的项目期望实现一个真正意义上的 VFS。
拥有规范的三层架构方便拓展底层文件系统，同时支持 POSIX 标准，提高与 UNIX 系统程序的兼容性。

通过调查可知，大部分的嵌入式文件系统仅仅实现了基础功能，未在此之上提出任何优化，因此，我们还希望在安全和性能两方面进行一定的创新。
在安全方面，可以看到 FreeRTOS 与 RT-Thread 之间不同的一点就是，它广泛采用了信号量的设计，我们期望继承这一优秀理念，来提高文件系统的可靠性。
同时对于嵌入式设备的存储介质易失性，我们期望加入文件加密的存储方式，来保证数据安全。
在性能方面，我们主要构思的是使用缓存来存储一些体积较小但是常用的文件以及各种索引信息，来减少访问外存或查找文件的时间成本。

这是一张我们自己绘制的 RT-Thread 的架构图可知，RT-Thread 使用文件标识数 -> 文件标识符 -> 虚拟文件节点三层架构来存储文件信息，以及在函数方面有 POSIX 标准接口函数 -> dfs 内部函数 -> 特定文件系统实现的对应函数三层调用链。
这两者的层级关系一一对应，将 RT-Thread/DFS 分为上中下三层，很好的解耦了文件系统不同模块之间的依赖关系，使得每一层的单独开发成为可能。
值得注意的一点是，尽管使用了结点的概念，但是 DFS 中的目录结构并不是树状的，而是采用了与 FreeRTOS + FAT 类似的哈希表来扁平存储每个文件结点所在的位置。这使得该文件系统查找效率很高，但是需要注意选择合理的冲突解决方式。
因此，本项目的文件系统架构抽象设计参考了 RT-Thread/DFS 的设计，同时针对 RT-Thread 与 FreeRTOS 之间的不同点（比如信号量）会做出一定的改变。

性能是文件系统的优化方向之一，本项目计划在实现虚拟文件系统的基本功能后，仿照 Linux 的文件缓存机制设计出适用于 FreeRTOS 的文件缓存。
此图所示为 Linux 文件缓存的机制，可以看到，Linux 的文件缓存是由 VFS 实现的，在 Linux 代码实现过程中主要有以下几个要点：
1. 设计一个合理的数据结构来管理文件和内存之间的映射关系，例如 Linux 中的 address_space。
2. 实现一个高效的缓存替换算法，来决定哪些文件数据需要保留在内存中，哪些需要回写到磁盘或者释放。
3. 考虑缓存的一致性问题，即如何保证内存中的文件数据和磁盘上的文件数据同步。
4. 考虑缓存的并发访问问题，即如何处理多个进程同时对同一个文件进行读写操作的情况。
5. 考虑缓存的性能优化问题，即如何利用预读、延迟写、批量写等技术来提高文件读写的速度和效率。
在实现缓存功能后，我们小组将测试ErisFS的性能在使用文件缓存前后的性能差异，对优化效果进行评估。

以 ff_fread（）为例，我们对 FreeRTOS-FAT 中函数调用情况进行了分析，以分析哪部分是和FreeRTOS操作系统本身相关的调用。
而由一下关系我们可以看到，仅有 FF_PendSemaphore，FF_ReleaseSemaphore 是在 FreeRTOS 中的函数，即释放信号量和获取信号量，
因此 FreeRTOS-Plus-FAT 对于 FreeRTOS 的依赖并不高，而是仅仅进行了信号量的传递，其余和硬件等物理介质（块设备）的联系在FAT中新写了库进行实现，
例如进行块读取写入等等操作。因此在 FreeRTOS 上进行类似的文件系统移植是可行的。

我们选用 QEMU 模拟器来为 FreeRTOS 模拟运行环境。与常用的 VMware 这类虚拟机只能模拟运行一个与主机具有相同指令集架构的系统不同，
QEMU 可以模拟与主机指令集不同的机器，如 ARM，MIPS 等。
QEMU 具有两种操作模式，Full system emulation 和 User mode emulation。
在完整的系统仿真模式下，QEMU 模拟一个完整的系统（例如一台PC），包括一个或多个处理器和各种外设。
在用户模式仿真模式下，QEMU 可以启动在一个 CPU 上为另一个 CPU 编译的进程。

STM32 系列是工业界使用较为广泛的 arm 架构的嵌入式设备。可选择使用该系列设备模拟运行 FreeRTOS 测试我们设计的虚拟文件系统。
即可利用 STM32CubeMX 生成项目实现 FreeRTOS 的 STM32 移植。

FreeRTOS 静态链接到应用程序中，因此演示和内核代码不是分开的。

我们根据 FreeRTOS 官方提供的演示，实现了一个 helloworld 程序，以下是运行结果:
qemu-system-arm 表示选择 arm 框架，-machine 选择模拟的板， RTOSDemo 为编译后的内核
后续则是关闭调试器，将输出端口设置为标准输出即为 cmd。

在这张图上放的是 ErisFS 的整体架构设计，可以看到它由三层组成，
最底层的是基础文件系统层，通过自己编写或者调用已经开发完成的库来对实际文件系统进行读写；
中间的 VFS 虚拟层则是将基础文件系统的操作进行抽象统一，引入了统一的文件节点、文件标识符等概念；
最上层的 POSIX 标准层是对 VFS 的虚拟层进行包装，使得其兼容 POSIX 标准更加易用。
每一层之间互不干扰，可以很容易的拓展某一层而不改变其他。

接下来，是我们的开发路线。
第零阶段实际上是验证阶段，主要是验证 QEMU 环境是否能满足开发嵌入式设备文件系统的需求，这在前面的技术依据中已经被完成了。
第一阶段计划是完成最小可行性系统，简单来说就是一个包含三层完整架构，但是功能有限的文件系统，比如只实现挂载，读写等操作，
只支持某一个文件系统。在实现这个之后，
接下来的两个阶段则是对这个最小可行性系统进行开发，例如第二阶段就是对系统的上两层进行完善，支持更多的 POSIX 标准函数。
完成这一阶段后，我们就得到了一个全面可用的虚拟文件系统项目，尽管他的底层文件系统只有一个。

接下来阶段 3 则是对底层文件系统进行添加，选取已经实现完善或者实现较为简单的文件系统进行添加。
由于架构的设计，不需要改动上两层代码即可添加。完成这一步之后，项目的三个层次都很完整了。
阶段 4 的优化是我们项目完全完成之后的远期规划，计划从性能和安全方面对 ErisFS 进行优化，考虑缓存、加密、信号量这几个途径来实现。
以上就是我们项目的完整开发路线。

